const ffmpeg = require('fluent-ffmpeg');
const fs = require('fs/promises');
const path = require('path');

// --- 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—É—Ç–∏ ---
const inputDir = path.join(__dirname, 'input');
const outputDir = path.join(__dirname, 'output');

// --- 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ---
const now = new Date();
const dateStr = now.toISOString().split('T')[0].replace(/-/g, '_'); // YYYY_MM_DD
const logFileName = path.join(__dirname, `process_${dateStr}.log`);

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ —Ñ–∞–π–ª –ª–æ–≥–∞.
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
async function logInfo(message) {
  const logMessage = `${new Date().toISOString()}: ${message}\n`;
  try {
    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
    console.log(message);
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    await fs.appendFile(logFileName, logMessage);
  } catch (err) {
    console.error('CRITICAL: Failed to write to log file:', err);
  }
}

// --- 3. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã ---
const PRESETS = {
  'conv0_5': {
    cli: [
      '-vf', 'scale=iw*0.5:ih*0.5',
      '-c:v', 'libx264',
      '-crf', '28',
      '-c:a', 'aac',
      '-b:a', '128k',
    ],
    outputExtension: '.mp4'
  },
  'web_h264': {
    cli: [
      '-c:v', 'libx264',
      '-crf', '23',
      '-preset', 'medium',
      '-c:a', 'aac',
      '-b:a', '160k',
      '-movflags', '+faststart'
    ],
    outputExtension: '.mp4'
  },
  'extract_audio': {
    cli: [
      '-vn',
      '-c:a', 'libmp3lame',
      '-q:a', '2'
    ],
    outputExtension: '.mp3'
  }
};

const VIDEO_EXTENSIONS = ['.mp4', '.mkv', '.avi', '.mov', '.flv', '.wmv'];

// --- 4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/**
 * –û–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç ffprobe –≤ Promise –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞.
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É.
 * @returns {Promise<object>} - –û–±—ä–µ–∫—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
 */
function getFileStats(filePath) {
  return new Promise((resolve, reject) => {
    ffmpeg.ffprobe(filePath, (err, metadata) => {
      if (err) {
        return reject(new Error(`ffprobe error for ${filePath}: ${err.message}`));
      }
      
      const format = metadata.format;
      const videoStream = metadata.streams.find(s => s.codec_type === 'video');
      const audioStream = metadata.streams.find(s => s.codec_type === 'audio');
      
      resolve({
        size: format.size,
        duration: format.duration,
        videoCodec: videoStream ? videoStream.codec_name : 'N/A',
        videoBitrate: videoStream ? (videoStream.bit_rate || 'N/A') : 'N/A',
        audioCodec: audioStream ? audioStream.codec_name : 'N/A',
        audioBitrate: audioStream ? (audioStream.bit_rate || 'N/A') : 'N/A',
      });
    });
  });
}

/** –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (KB, MB, GB). */
function formatBytes(bytes) {
  if (bytes === 0 || !bytes) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/** –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∏—Ç—Ä–µ–π—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (kb/s). */
function formatBitrate(bitrate) {
  if (!bitrate || bitrate === 'N/A' || isNaN(bitrate)) return 'N/A';
  return (parseInt(bitrate) / 1000).toFixed(0) + ' kb/s';
}

// --- 5. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ---
async function convertVideos(presetName) {
  await logInfo(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –ø—Ä–µ—Å–µ—Ç–æ–º: ${presetName}`);

  const preset = PRESETS[presetName];
  if (!preset) {
    await logInfo(`‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ—Å–µ—Ç "${presetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    await logInfo(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã: ${Object.keys(PRESETS).join(', ')}`);
    return;
  }

  let files;
  try {
    await fs.mkdir(inputDir, { recursive: true });
    await fs.mkdir(outputDir, { recursive: true });
    files = await fs.readdir(inputDir);
  } catch (err) {
    await logInfo(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫: ${err.message}`);
    return;
  }

  const videoFiles = files.filter(file => 
    VIDEO_EXTENSIONS.includes(path.extname(file).toLowerCase())
  );

  if (videoFiles.length === 0) {
    await logInfo('üü° –í –ø–∞–ø–∫–µ /input –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤.');
    return;
  }

  await logInfo(`–ù–∞–π–¥–µ–Ω–æ ${videoFiles.length} –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–æ—á–µ—Ä–µ–¥–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...`);

  let successCount = 0;
  let failedCount = 0;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º for...of —Ü–∏–∫–ª –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  for (let i = 0; i < videoFiles.length; i++) {
    const file = videoFiles[i];
    const fileData = path.parse(file);
    const inputPath = path.join(inputDir, file);
    const outputName = `${fileData.name}${preset.outputExtension}`;
    const outputPath = path.join(outputDir, outputName);

    await logInfo(`\n--- [${i + 1}/${videoFiles.length}] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É: ${file} ---`);
    
    let sourceStats;
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ò–°–•–û–î–ù–û–ì–û —Ñ–∞–π–ª–∞
      sourceStats = await getFileStats(inputPath);
      await logInfo(`  Source Stats:`);
      await logInfo(`    File Size: ${formatBytes(sourceStats.size)}`);
      await logInfo(`    Video: ${sourceStats.videoCodec} @ ${formatBitrate(sourceStats.videoBitrate)}`);
      await logInfo(`    Audio: ${sourceStats.audioCodec} @ ${formatBitrate(sourceStats.audioBitrate)}`);
    } catch (err) {
      await logInfo(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (ffprobe) –¥–ª—è ${file}: ${err.message}`);
      await logInfo(`--- –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª: ${file} ---`);
      failedCount++;
      continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É
    }

    const startTime = new Date();
    await logInfo(`  Start Time: ${startTime.toISOString()}`);

    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ Promise
    let conversionError = null;
    try {
      await new Promise((resolve, reject) => {
        ffmpeg(inputPath)
          .addOutputOptions(preset.cli)
          .output(outputPath)
          .on('start', (command) => {
            // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–∞–º–∞, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log(`[${file}] FFmpeg –∫–æ–º–∞–Ω–¥–∞: ${command}`);
          })
          .on('progress', (progress) => {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º % –≤ –∫–æ–Ω—Å–æ–ª–∏ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            if (progress.percent) {
              process.stdout.write(`[${file}]: ‚è≥ Processing... ${progress.percent.toFixed(2)}% complete\r`);
            }
          })
          .on('end', () => {
            process.stdout.write('\n'); // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            resolve();
          })
          .on('error', (err) => {
            process.stdout.write('\n'); // –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            reject(err);
          })
          .run();
      });
    } catch (err) {
      conversionError = err;
    }

    const endTime = new Date();
    const durationMs = endTime.getTime() - startTime.getTime();
    await logInfo(`  End Time: ${endTime.toISOString()}`);
    await logInfo(`  Duration: ${(durationMs / 1000).toFixed(2)} seconds`);

    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (conversionError) {
      await logInfo(`  ‚ùå [${file}]: FAILED. Error: ${conversionError.message}`);
      failedCount++;
    } else {
      // 4. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –†–ï–ó–£–õ–¨–¢–ò–†–£–Æ–©–ï–ì–û —Ñ–∞–π–ª–∞
      try {
        const targetStats = await getFileStats(outputPath);
        await logInfo(`  Target Stats:`);
        await logInfo(`    File Size: ${formatBytes(targetStats.size)}`);
        await logInfo(`    Video: ${targetStats.videoCodec} @ ${formatBitrate(targetStats.videoBitrate)}`);
        await logInfo(`    Audio: ${targetStats.audioCodec} @ ${formatBitrate(targetStats.audioBitrate)}`);
        
        // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        const sizeChange = ((targetStats.size - sourceStats.size) / sourceStats.size) * 100;
        await logInfo(`    Size Change: ${sizeChange.toFixed(2)}% (from ${formatBytes(sourceStats.size)} to ${formatBytes(targetStats.size)})`);

        await logInfo(`  ‚úÖ [${file}]: SUCCESS -> ${outputName}`);
        successCount++;
      } catch (err) {
        await logInfo(`  ‚ö†Ô∏è [${file}]: SUCCESS, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${err.message}`);
        successCount++; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç.–∫. –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞
      }
    }
    await logInfo(`--- –ó–∞–≤–µ—Ä—à–∏–ª–∏: ${file} ---`);
  }

  // 6. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥
  await logInfo('\n--- üèÅ –°–µ—Å—Å–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---');
  await logInfo(`–£—Å–ø–µ—à–Ω–æ: ${successCount}`);
  await logInfo(`–° –æ—à–∏–±–∫–∞–º–∏ / –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${failedCount}`);
  await logInfo(`–í—Å–µ –ª–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${logFileName}`);
}

// --- 6. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ ---

const presetName = process.argv[2];

if (!presetName) {
  console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–µ—Å–µ—Ç–∞.');
  console.log('–ü—Ä–∏–º–µ—Ä: node convert.js web_h264');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:', Object.keys(PRESETS).join(', '));
} else {
  convertVideos(presetName);
}