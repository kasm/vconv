const ffmpeg = require('fluent-ffmpeg');
const fs = require('fs/promises');
const path = require('path');

// --- 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—É—Ç–∏ ---
const inputDir = path.join(__dirname, 'input');
const outputDir = path.join(__dirname, 'output');

// --- 2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ—Å–µ—Ç—ã ---
// –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ 'cli' –¥–ª—è –æ–ø—Ü–∏–π, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ
// –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —á–µ–º –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞.
const PRESETS = {
  // –°–∂–∏–º–∞–µ—Ç –≤–∏–¥–µ–æ, —É–º–µ–Ω—å—à–∞—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ 50%
  'conv0_5': {
    cli: [
      '-vf', 'scale=iw*0.5:ih*0.5', // video filter: scale width and height by 0.5
      '-c:v', 'libx264',           // video codec: h.264
      '-crf', '28',                // quality (constant rate factor): 28 (higher is smaller/worse)
      '-c:a', 'aac',               // audio codec: aac
      '-b:a', '128k',              // audio bitrate: 128k
    ],
    outputExtension: '.mp4'
  },
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ–±-–ø—Ä–µ—Å–µ—Ç H.264 (—Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
  'web_h264': {
    cli: [
      '-c:v', 'libx264',
      '-crf', '23',
      '-preset', 'medium', // 'slow' is better quality, 'fast' is faster
      '-c:a', 'aac',
      '-b:a', '160k',
      '-movflags', '+faststart' // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–ª—è –≤–µ–±-—Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    ],
    outputExtension: '.mp4'
  },
  
  // –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ –≤ MP3
  'extract_audio': {
    cli: [
      '-vn',         // No video
      '-c:a', 'libmp3lame',
      '-q:a', '2'    // MP3 quality (0-9, 0 is best)
    ],
    outputExtension: '.mp3'
  }
};

// –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å—á–∏—Ç–∞–µ–º –≤–∏–¥–µ–æ
const VIDEO_EXTENSIONS = ['.mp4', '.mkv', '.avi', '.mov', '.flv', '.wmv'];

// --- 3. –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ---
async function convertVideos(presetName) {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –ø—Ä–µ—Å–µ—Ç–æ–º: ${presetName}`);

  // 3.1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ—Å–µ—Ç
  const preset = PRESETS[presetName];
  if (!preset) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: –ü—Ä–µ—Å–µ—Ç "${presetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:', Object.keys(PRESETS).join(', '));
    return;
  }

  try {
    // 3.2. –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    await fs.mkdir(inputDir, { recursive: true });
    await fs.mkdir(outputDir, { recursive: true });

    // 3.3. –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ input
    const files = await fs.readdir(inputDir);

    const videoFiles = files.filter(file => 
      VIDEO_EXTENSIONS.includes(path.extname(file).toLowerCase())
    );

    if (videoFiles.length === 0) {
      console.warn('üü° –í –ø–∞–ø–∫–µ /input –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤.');
      return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${videoFiles.length} –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...`);

    // 3.4. –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    const conversionPromises = videoFiles.map(file => {
      const inputPath = path.join(inputDir, file);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const fileData = path.parse(file);
      const outputName = `${fileData.name}${preset.outputExtension}`;
      const outputPath = path.join(outputDir, outputName);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º ffmpeg
      return new Promise((resolve, reject) => {
        ffmpeg(inputPath)
          .addOutputOptions(preset.cli) // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—à–∏ CLI –æ–ø—Ü–∏–∏
          .output(outputPath)
          .on('start', (command) => console.log(`[${file}]: –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞...`))
          .on('end', () => {
            console.log(`[${file}]: ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ -> ${outputName}`);
            resolve({ file, status: 'success' });
          })
          .on('error', (err) => {
            console.error(`[${file}]: ‚ùå –û—à–∏–±–∫–∞: ${err.message}`);
            reject({ file, status: 'error', message: err.message });
          })
          .run();
      });
    });

    // 3.5. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
    const results = await Promise.allSettled(conversionPromises);

    // 3.6. –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥
    const successCount = results.filter(r => r.status === 'fulfilled').length;
    const failedCount = results.length - successCount;

    console.log('\n--- üèÅ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---');
    console.log(`–£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`–° –æ—à–∏–±–∫–∞–º–∏: ${failedCount}`);

  } catch (err) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

// --- 4. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ ---

// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ—Å–µ—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
// –ü—Ä–∏–º–µ—Ä: node convert.js web_h264
const presetName = process.argv[2];

if (!presetName) {
  console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–µ—Å–µ—Ç–∞.');
  console.log('–ü—Ä–∏–º–µ—Ä: node convert.js web_h264');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã:', Object.keys(PRESETS).join(', '));
} else {
  convertVideos(presetName);
}